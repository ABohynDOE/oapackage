environment:

  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    WITH_COMPILER: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_compiler.cmd"
    #CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_compiler.cmd"

  matrix:
#    fast_finish: true
    
    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.9"
      PYTHON_ARCH: "64"
      WINDOWS_SDK_VERSION: "v7.0"

    - PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5.0"
      PYTHON_ARCH: "64"
      WINDOWS_SDK_VERSION: "v7.1"

    - PYTHON: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4.3"
      PYTHON_ARCH: "64"
      WINDOWS_SDK_VERSION: "v7.1"

    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.9"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python33"
      PYTHON_VERSION: "3.3.5"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python34"
      PYTHON_VERSION: "3.4.3"
      PYTHON_ARCH: "32"

matrix:
      fast_finish: true

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"

cache:
  - C:\tmp -> \appveyor\install_numpy.ps1
  
install:
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  - "powershell appveyor\\install.ps1"
  
  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  
  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%WITH_COMPILER% pip install wheel"
  #- "%WITH_COMPILER% pip install twine"
  
  # Now that wheel has been installed, check to see if a numpy wheel has been
  # made yet. If it hasn't, compile it and put it in C:\tmp.
  - "powershell ./appveyor/install_numpy.ps1"
  
  #- "%WITH_COMPILER% pip wheel --wheel-dir=c:\numpy\ numpy"
  #- "%WITH_COMPILER% pip install numpy"
    
  # This is where I install numpy from the pre-built wheel I compiled either
  # earlier in this session, or in a previous session.
  - "%CMD_IN_ENV% pip install --no-index --find-links=c:\\tmp numpy"
  
  # https://chocolatey.org
  - cinst -y swig

build: off

test_script:
  - "%WITH_COMPILER% %PYTHON%/python setup.py test"

after_test:
  - "%WITH_COMPILER% %PYTHON%/python setup.py bdist_wheel bdist_wininst"
  - ps: "ls dist"

artifacts:
  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse

